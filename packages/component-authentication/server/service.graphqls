type CurrentUser {
    id: String
    username: String
    groups: [String!]

    email: String
    emailIsValidated: Boolean!
    hasPendingEmailValidation: Boolean!
    emailValidationTokenExpire: DateTime
}

enum CurrentUserEmailValidationOutcome {
    Successful
    InvalidToken
    ExpiredToken
}

type CurrentUserResult {
    user: CurrentUser
    emailValidationTokenOutcome: CurrentUserEmailValidationOutcome
}


extend type Query {
    currentUser(emailValidationToken: String) : CurrentUserResult
}


# Email Confirmation
enum CurrentUserEmailConfirmationOutcome {
    NoUserLoggedIn,
    AlreadyConfirmed
    InvalidEmailAddress
    ValidationSent
    TooManyValidationAttempts
}

extend type Mutation {
    confirmCurrentUserEmail(email: String!) : CurrentUserEmailConfirmationOutcome!
    resendCurrentUserEmailValidation(email: String) : CurrentUserEmailConfirmationOutcome!
}